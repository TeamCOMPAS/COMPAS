
# use GNU C++ compiler by default
#
# can be overridden with CPP parameter
#
# e.g. make CPP=clang will use clang instaed of g++
# (note uppercase 'CPP' and no whitespace around '=')

CPP := g++
BOOST :=

ODIR := ../obj
BDIR := ../bin

EXE := $(BDIR)/COMPAS

# build COMPAS
ifeq ($(filter clean,$(MAKECMDGOALS)),)
  $(info Building $(EXE) with $(CPP))
endif


OPTFLAGS :=
ifneq ($(filter fast,$(MAKECMDGOALS)),)
  $(info Adding optimisation flags into the compilation - will take longer to build)
  OPTFLAGS += -O3
endif

ifneq ($(filter staticfast,$(MAKECMDGOALS)),)
  $(info Adding optimisation flags into the (static) compilation - will take longer to build)
  OPTFLAGS += -O3
endif


CXXFLAGS := -std=c++11 -Wall --param=max-vartrack-size=0 $(OPTFLAGS)
ICFLAGS := -I$(BOOST)/include -I.
LFLAGS :=  -L$(BOOST)/lib -lgsl -lgslcblas -lstdc++ -lm -lz -ldl -lboost_filesystem -lboost_program_options -lboost_system -Xlinker -rpath -Xlinker $(BOOST)/lib

SOURCES :=								\
			profiling.cpp				\
			utils.cpp					\
			vector3d.cpp				\
										\
			Rand.cpp					\
			Options.cpp					\
			Log.cpp						\
			Errors.cpp					\
										\
			BaseStar.cpp				\
										\
			Star.cpp					\
										\
			MainSequence.cpp			\
			MS_lte_07.cpp				\
			MS_gt_07.cpp				\
										\
			CH.cpp						\
										\
			GiantBranch.cpp				\
			HG.cpp						\
			FGB.cpp						\
			CHeB.cpp					\
			EAGB.cpp					\
			TPAGB.cpp					\
										\
			HeMS.cpp					\
			HeHG.cpp					\
			HeGB.cpp					\
										\
			HeWD.cpp					\
			COWD.cpp					\
			ONeWD.cpp					\
										\
			NS.cpp						\
			BH.cpp						\
			MR.cpp						\
										\
			BinaryConstituentStar.cpp	\
			BaseBinaryStar.cpp			\
			BinaryStar.cpp				\
										\
			main.cpp

OBJI := $(SOURCES:.cpp=.o)
OBJS := $(patsubst %,$(ODIR)/%,$(OBJI))

# Create the list of header files, and remove
# main.h from this auto-generated list
INCL := $(SOURCES:.cpp=.h)
INCL := $(filter-out main.h,$(INCL))

all: $(EXE)
	@echo $(OBJS)

$(EXE): $(OBJS)
	@echo $(SOURCES)
	@echo $(OBJS)
	$(CPP) $(OBJS) $(LFLAGS) -o $@

static: $(EXE)_STATIC
	@echo $(OBJS)

$(EXE)_STATIC: $(OBJS)
	@echo $(SOURCES)
	@echo $(OBJS)
	$(CPP) $(OBJS) $(LFLAGS) -static -o $@

$(ODIR)/%.o: %.cpp
	$(CPP) $(CXXFLAGS) $(ICFLAGS) -o $@ -c $?

.phony: clean static fast staticfast

fast: $(EXE)
staticfast:$(EXE)_STATIC

clean:
	rm -f $(OBJS) $(EXE) $(EXE)_STATIC
